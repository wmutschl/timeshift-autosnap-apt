#!/bin/bash
#original author: gobonja
#adapted for apt by Willi Mutschler (wmutschl)

[ $(findmnt / -no fstype) == "overlay" ] && { echo "==> skipping timeshift-autosnap because system is booted in Live CD mode..."; exit 0; }

[[ -v SKIP_AUTOSNAP ]] && { echo "==> skipping timeshift-autosnap due SKIP_AUTOSNAP environment variable being set."; exit 0; }

readonly TIMESTAMP_FILE=/tmp/timeshift-autosnap-apt-timestamp
readonly CONF_FILE=/etc/timeshift-autosnap-apt.conf
readonly SNAPSHOTS_TO_DELETE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
readonly SNAPSHOT_NAME_DATE_PATTERN="[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}"

get_property() {
    if [ ! -f $1 ]; then
        echo "$1 not found! Using $2=$4" >&2;
        param_value=$4
    else
        param_value=`sed '/^\#/d' $1 | grep $2 | tail -n 1 |\
        cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`

        if ([ "$3" == "boolean" ] && [ "$param_value" != true ] && [ "$param_value" != false ]) || \
           ([ "$3" == "integer" ] && [[ ! "$param_value" =~ ^[-+]?([1-9][[:digit:]]*|1)$ ]]) || \
           ([ "$3" == "string" ] && [ "$param_value" == "" ]) ; then
            echo "Wrong paramater in $1. Using $2=$4" >&2
            param_value=$4
        fi
    fi

    echo $param_value
}

MIN_INTERVAL=$(get_property "$CONF_FILE" "minInterval" "integer" "30")
LAST_TIME=$(get_property "$TIMESTAMP_FILE" "lastSnapshot" "integer" "0")
CURRENT_TIME=$(date +"%s")

if [ $(expr $LAST_TIME + $MIN_INTERVAL \* 60) -gt $CURRENT_TIME ]; then
    echo "==> skipping timeshift-autosnap-apt because the elapsed time since the last snapshot is smaller than minInterval in $CONF_FILE" >&2; exit 0;
fi

if $(get_property "$CONF_FILE" "skipAutosnap" "boolean" "false") ; then
    echo "==> skipping timeshift-autosnap-apt due skipAutosnap in $CONF_FILE set to TRUE." >&2; exit 0;
fi

if $(get_property "$CONF_FILE" "snapshotBoot" "boolean" "true") ; then
    echo "Rsyncing /boot into the filesystem before the call to timeshift." >&2;
    mkdir -p /boot.backup
    cmd="rsync -au --exclude 'efi' --delete /boot/ /boot.backup/"
    eval $cmd
fi

if $(get_property "$CONF_FILE" "snapshotEFI" "boolean" "true") ; then
    echo "Rsyncing /boot/efi into the filesystem before the call to timeshift." >&2;
    mkdir -p /boot.backup
    mkdir -p /boot.backup/efi
    cmd="rsync -au --delete /boot/efi/ /boot.backup/efi/"
    eval $cmd
fi

readonly SNAPSHOT_DESCRIPTION=$(get_property "$CONF_FILE" "snapshotDescription" "string" "{timeshift-autosnap-apt} {created before upgrade}")

timeshift --create --comments "$SNAPSHOT_DESCRIPTION" || { echo "Unable to run timeshift-autosnap-apt! Please close Timeshift and try again. Script will now exit..." >&2; exit 1; }

echo "lastSnapshot=$(date +"%s")" > /var/run/timeshift-autosnap-apt-timestamp

if $(get_property "$CONF_FILE" "deleteSnapshots" "boolean" "true") ; then
    timeshift --list > $SNAPSHOTS_TO_DELETE
    sed -ni "/$SNAPSHOT_DESCRIPTION/p" $SNAPSHOTS_TO_DELETE
    sed -ni "s/.*\($SNAPSHOT_NAME_DATE_PATTERN\).*/\1/p" $SNAPSHOTS_TO_DELETE

    count=$(($(sed -n '$=' $SNAPSHOTS_TO_DELETE)-$(get_property "$CONF_FILE" "maxSnapshots" "integer" "3")))

    if [ "$count" -gt 0 ] ; then
        sed -i $(($count))q $SNAPSHOTS_TO_DELETE
        
        for snapshot in $(cat $SNAPSHOTS_TO_DELETE); do
            timeshift --delete --snapshot $snapshot
        done
    fi
fi;

if $(get_property "$CONF_FILE" "updateGrub" "boolean" "true") && [[ -d /etc/default/grub-btrfs ]]; then
    grub-mkconfig -o /boot/grub/grub.cfg
fi;

exit 0